// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id    Int     @default(autoincrement()) @id
  email String  @unique  @db.VarChar(100)
  password String  @db.VarChar(100)
  name  String
  type  String // TODO: enum
  store Store[]
}

model Store {
  id    Int     @default(autoincrement()) @id
  name  String   @db.VarChar(100)
  masterUser User    @relation(fields: [masterUserId], references: [id])
  masterUserId Int
  category Category[]
}

model Category {
  id    Int     @default(autoincrement()) @id
  name  String   @db.VarChar(50)
  store    Store?    @relation(fields: [storeId], references: [id])
  storeId  Int?
  meneSearch MeneSearch[]
}

model MeneSearch {
  id    Int     @default(autoincrement()) @id //for nice index
  category  Category    @relation(fields: [categoryId], references: [id])
  categoryId Int
  menu  Menu    @relation(fields: [menuId], references: [id])
  menuId Int
}

model Menu {
  id    Int     @default(autoincrement()) @id
  name  String   @db.VarChar(50)
  info  String?   @db.VarChar(255)
  price Int
  photoUrl String? @db.VarChar(255)
  meneSearch MeneSearch[]
  option  Option[]
}

model Option {
  id    Int     @default(autoincrement()) @id
  name  String   @db.VarChar(50)
  menu  Menu    @relation(fields: [menuId], references: [id])
  menuId Int
  optionInfo OptionInfo[]
}

model OptionInfo {
  id    Int     @default(autoincrement()) @id
  option  Option @relation(fields: [optionId], references: [id])
  optionId Int
  name  String   @db.VarChar(50)
}